import com.kanzy.buildsrc.Libs

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "kotlin-parcelize"
    id "org.jetbrains.kotlin.kapt"
    id "com.github.ben-manes.versions" version "0.38.0"
    id "dagger.hilt.android.plugin"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.kanzy.music"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'BASE_URL', '"https://api.kanzymusic.com/KanzyMusic/"')
            buildConfigField("boolean", "IsProd", "true")
            buildConfigField("String", "DB_NAME", '"KMDB"')
            resValue "string", "app_name", "Kanzy Music"
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'BASE_URL', '"https://api.kanzymusic.com/KanzyMusic/"')
            buildConfigField("boolean", "IsProd", "false")
            buildConfigField("String", "DB_NAME", '"KMDB"')
            resValue "string", "app_name", "KM-Test"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    buildFeatures {
        viewBinding true
    }

    // Allow references to generated code
    kapt {
        correctErrorTypes true
    }

    packagingOptions {
        exclude("META-INF/DEPENDENCIES")
        exclude("META-INF/LICENSE")
        exclude("META-INF/LICENSE.txt")
        exclude("META-INF/license.txt")
        exclude("META-INF/NOTICE")
        exclude("META-INF/NOTICE.txt")
        exclude("META-INF/notice.txt")
        exclude("META-INF/ASL2.0")
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {

    implementation project(path: ':data')
    implementation project(path: ':domain')

    implementation(Libs.AndroidX.coreKtx)
    implementation(Libs.AndroidX.appcompat)
    implementation(Libs.AndroidX.material)
    implementation(Libs.AndroidX.constraintLayout)
    implementation(Libs.AndroidX.recyclerview)
    implementation(Libs.AndroidX.legacySupportV4)

    implementation(Libs.Coroutine.android)
    implementation(Libs.Coroutine.core)

    implementation(Libs.AndroidX.Room.ktx)
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt(Libs.AndroidX.Room.compiler)

    implementation(Libs.Moshi.kotlin)
    implementation(Libs.Moshi.kotlinCodegen)
    implementation(Libs.Moshi.lazy)

    implementation(Libs.Retrofit2.moshi)
    implementation(Libs.Retrofit2.retrofit)
    implementation(Libs.Okhttp3.okhttp)
    implementation(Libs.Okhttp3.logging)
    implementation(Libs.conscrypt)

    implementation(Libs.coil)
    implementation(Libs.timber)
    implementation(Libs.assent)

    debugImplementation(Libs.Chucker.debug)
    releaseImplementation(Libs.Chucker.release)

    implementation(Libs.AndroidX.fragmentKtx)
    implementation(Libs.AndroidX.activityKtx)

    implementation(Libs.AndroidX.Lifecycle.viewModelKtx)
    implementation(Libs.AndroidX.Lifecycle.livedataKtx)
    implementation(Libs.AndroidX.Lifecycle.runtimeKtx)
    implementation(Libs.AndroidX.Lifecycle.commonJava8)
    implementation(Libs.AndroidX.Lifecycle.process)

    implementation(Libs.AndroidX.securityCrypto)

    implementation(Libs.Hilt.android)
    kapt(Libs.Hilt.compiler)

    implementation(Libs.exoplayer)

    testImplementation(Libs.AndroidX.junit)
    testImplementation(Libs.Coroutine.test)
    testImplementation(Libs.robolectric)
    androidTestImplementation(Libs.AndroidX.junitExt)
    androidTestImplementation(Libs.AndroidX.espressoCore)

}